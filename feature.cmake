# define the configuration header file path 
# (put it in build directory cuz it is autogenerated and does not have to be pushed to Github)
set(OUTPUT_FILE ${CMAKE_BINARY_DIR}/configuration.h)

# find the python script and throw an error if it was not found
find_program(CONFIG_SCRIPT NAMES config.py PATHS ${CMAKE_CURRENT_SOURCE_DIR}/../.. REQUIRED)

# make sure python3 is present and throw an error if it was not found
find_package(Python3 REQUIRED)

# macro to configure features by passing the right input to config.py
macro(configFeature MODULE INPUT)

    # to execute the command that runs the .py script and generate configuration.h (considered the output)
    # add_custom_command(
    #     OUTPUT ${OUTPUT_FILE}  # specify the output file (configuration.h)
    #     COMMAND ${CMAKE_COMMAND} -E env python3 ${CONFIG_SCRIPT} ${INPUT}  # run the Python script with the passed argument using CMAKE command (platform independent)
    #     COMMENT "Generating or updating ${OUTPUT_FILE} using ${CONFIG_SCRIPT} with input=${INPUT}" # prints this when the command is executed
    #     WORKING_DIRECTORY ${CMAKE_BINARY_DIR} # this specifies the folder the script will be executed in (in build to put configuration.h there)
    #     VERBATIM # take every command literally and do not overcook
    # )

    # # create a custom target that depends on the output file (configuration.h)
    # add_custom_target(
    #     "${MODULE}-Target"      # custom target name changes depending on the MODULE argument 
    #     DEPENDS ${OUTPUT_FILE}  # make sure the target depends on the generated configuration.h
    # )


    add_custom_target(
        "${MODULE}-Target"  # custom target name changes depending on the MODULE argument
        COMMAND ${CMAKE_COMMAND} -E env python3 ${CONFIG_SCRIPT} ${INPUT}  # Run the Python script with the passed argument using CMAKE command (platform independent)
        COMMENT "Generating or updating ${OUTPUT_FILE} using ${CONFIG_SCRIPT} with input=${INPUT}"  # Prints this when the command is executed
        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}  # This specifies the folder the script will be executed in (in build to put configuration.h there)
        VERBATIM  # Take every command literally and do not overcook
    )

    # ensures that the module library that calls this macro depends on the custom target aka configuration.h
    add_dependencies(${MODULE} "${MODULE}-Target")

endmacro()
